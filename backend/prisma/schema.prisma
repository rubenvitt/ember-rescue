generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bearbeiter {
  id                      String                   @id() @default(cuid())
  name                    String                   @unique
  active                  Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  einheit_status_historie EinheitStatusHistorie[]
  einsatz                 Einsatz[]
  einsatztagebuch_eintrag EinsatztagebuchEintrag[]

  @@map("bearbeiter")
}

model Einheit {
  id                      String                  @id() @default(cuid())
  funkrufname             String
  typ                     String
  kapazitaet              Int
  istTemporaer            Boolean
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  aktuellerStatusId       String?
  status                  Status?                 @relation(fields: [aktuellerStatusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  einheit_status_historie EinheitStatusHistorie[]
  einsatz_einheit         EinheitOnEinsatz[]
  Einsatz                 Einsatz[]

  @@map("einheiten")
}

model EinheitStatusHistorie {
  id           String      @id() @default(cuid())
  zeitpunkt    DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  einheitId    String?
  statusId     String?
  bearbeiterId String?
  einsatzId    String?
  bearbeiter   Bearbeiter? @relation(fields: [bearbeiterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status       Status?     @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  einsatz      Einsatz?    @relation(fields: [einsatzId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  einheit      Einheit?    @relation(fields: [einheitId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("einheitenStatusHistorie")
}

model Einsatz {
  id                           String                    @id() @default(cuid())
  beginn                       DateTime
  ende                         DateTime?
  abgeschlossen                DateTime?
  createdAt                    DateTime                  @default(now())
  updatedAt                    DateTime                  @updatedAt
  bearbeiterId                 String?
  aufnehmendesRettungsmittelId String
  einheit_status_historie      EinheitStatusHistorie[]
  bearbeiter                   Bearbeiter?               @relation(fields: [bearbeiterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  aufnehmendes_rettungsmittel  Einheit                   @relation(fields: [aufnehmendesRettungsmittelId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  einsatz_einheit              EinheitOnEinsatz[]
  einsatztagebuch_eintrag      EinsatztagebuchEintrag[]
  einsatz_alarmstichwort       EinsatzOnAlarmstichwort[]

  @@map("einsaetze")
}

model EinheitOnEinsatz {
  id                    String                     @id() @default(cuid())
  einsatzbeginn         DateTime
  einsatzende           DateTime?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  einsatzId             String?
  einheitId             String?
  einheit               Einheit?                   @relation(fields: [einheitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  einsatz               Einsatz?                   @relation(fields: [einsatzId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  einsatz_einheit_kraft PersonOnEinheitOnEinsatz[]

  @@map("einheitenOnEinsaetze")
}

model PersonOnEinheitOnEinsatz {
  id               String            @id() @default(cuid())
  fahrzeugfuehrer  Boolean
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  einsatzEinheitId String?
  personId         String?
  person           Person?           @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  einsatz_einheit  EinheitOnEinsatz? @relation(fields: [einsatzEinheitId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("personenOnEinsaetze")
}

model EinsatztagebuchEintrag {
  id           String      @id() @default(cuid())
  timestamp    DateTime
  type         String
  content      String
  absender     String
  empfaenger   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  einsatzId    String?
  bearbeiterId String?
  einsatz      Einsatz?    @relation(fields: [einsatzId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bearbeiter   Bearbeiter? @relation(fields: [bearbeiterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([absender])
  @@index([empfaenger])
  @@index([type])
  @@map("einsatztagebuchEintraege")
}

model Person {
  id                    String                     @id() @default(cuid())
  name                  String
  telefonnummer         String
  fuehrungskraft        Boolean
  istTemporaer          Boolean
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  einsatz_einheit_kraft PersonOnEinheitOnEinsatz[]
  person_qualifikation  PersonOnQualifikation[]

  @@map("personen")
}

model PersonOnQualifikation {
  id              String         @id() @default(cuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  personId        String?
  qualifikationId String?
  qualifikation   Qualifikation? @relation(fields: [qualifikationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person          Person?        @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("personenOnQualifikationen")
}

model Qualifikation {
  id                   String                  @id() @default(cuid())
  bezeichnung          String
  abkuerzung           String
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  person_qualifikation PersonOnQualifikation[]

  @@map("qualifikationen")
}

model Status {
  id                      String                  @id() @default(cuid())
  code                    String
  bezeichnung             String
  beschreibung            String
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  einheit                 Einheit[]
  einheit_status_historie EinheitStatusHistorie[]

  @@map("status")
}

model EinsatzOnAlarmstichwort {
  id               String          @id() @default(cuid())
  einsatzId        String
  alarmstichwortId String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  einsatz          Einsatz?        @relation(fields: [einsatzId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  alarmstichwort   Alarmstichwort? @relation(fields: [alarmstichwortId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("einsatzOnAlarmstichworte")
}

model Alarmstichwort {
  id                     String                    @id() @default(cuid())
  bezeichnung            String
  beschreibung           String
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  alarmstichwort_einsatz EinsatzOnAlarmstichwort[]

  @@map("alarmstichworte")
}

model Secret {
  id        String   @id() @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("secrets")
}
